# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.base_model_ import Model
from models.education_items import EducationItems  # noqa: F401,E501
from models.experience_items import ExperienceItems  # noqa: F401,E501
from models.skills_items import SkillsItems  # noqa: F401,E501
import util


class CV(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, position: str=None, address: str=None, mobile: str=None, email: str=None, github: str='', linkedin: str='', skype: str='', education: List[EducationItems]=None, skills: List[SkillsItems]=None, experience: List[ExperienceItems]=None):  # noqa: E501
        """CV - a model defined in Swagger

        :param name: The name of this CV.  # noqa: E501
        :type name: str
        :param position: The position of this CV.  # noqa: E501
        :type position: str
        :param address: The address of this CV.  # noqa: E501
        :type address: str
        :param mobile: The mobile of this CV.  # noqa: E501
        :type mobile: str
        :param email: The email of this CV.  # noqa: E501
        :type email: str
        :param github: The github of this CV.  # noqa: E501
        :type github: str
        :param linkedin: The linkedin of this CV.  # noqa: E501
        :type linkedin: str
        :param skype: The skype of this CV.  # noqa: E501
        :type skype: str
        :param education: The education of this CV.  # noqa: E501
        :type education: List[EducationItems]
        :param skills: The skills of this CV.  # noqa: E501
        :type skills: List[SkillsItems]
        :param experience: The experience of this CV.  # noqa: E501
        :type experience: List[ExperienceItems]
        """
        self.swagger_types = {
            'name': str,
            'position': str,
            'address': str,
            'mobile': str,
            'email': str,
            'github': str,
            'linkedin': str,
            'skype': str,
            'education': List[EducationItems],
            'skills': List[SkillsItems],
            'experience': List[ExperienceItems]
        }

        self.attribute_map = {
            'name': 'name',
            'position': 'position',
            'address': 'address',
            'mobile': 'mobile',
            'email': 'email',
            'github': 'github',
            'linkedin': 'linkedin',
            'skype': 'skype',
            'education': 'education',
            'skills': 'skills',
            'experience': 'experience'
        }

        self._name = name
        self._position = position
        self._address = address
        self._mobile = mobile
        self._email = email
        self._github = github
        self._linkedin = linkedin
        self._skype = skype
        self._education = education
        self._skills = skills
        self._experience = experience

    @classmethod
    def from_dict(cls, dikt) -> 'CV':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CV of this CV.  # noqa: E501
        :rtype: CV
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this CV.


        :return: The name of this CV.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CV.


        :param name: The name of this CV.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def position(self) -> str:
        """Gets the position of this CV.


        :return: The position of this CV.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position: str):
        """Sets the position of this CV.


        :param position: The position of this CV.
        :type position: str
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    @property
    def address(self) -> str:
        """Gets the address of this CV.


        :return: The address of this CV.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this CV.


        :param address: The address of this CV.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def mobile(self) -> str:
        """Gets the mobile of this CV.


        :return: The mobile of this CV.
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile: str):
        """Sets the mobile of this CV.


        :param mobile: The mobile of this CV.
        :type mobile: str
        """
        if mobile is None:
            raise ValueError("Invalid value for `mobile`, must not be `None`")  # noqa: E501

        self._mobile = mobile

    @property
    def email(self) -> str:
        """Gets the email of this CV.


        :return: The email of this CV.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this CV.


        :param email: The email of this CV.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def github(self) -> str:
        """Gets the github of this CV.


        :return: The github of this CV.
        :rtype: str
        """
        return self._github

    @github.setter
    def github(self, github: str):
        """Sets the github of this CV.


        :param github: The github of this CV.
        :type github: str
        """

        self._github = github

    @property
    def linkedin(self) -> str:
        """Gets the linkedin of this CV.


        :return: The linkedin of this CV.
        :rtype: str
        """
        return self._linkedin

    @linkedin.setter
    def linkedin(self, linkedin: str):
        """Sets the linkedin of this CV.


        :param linkedin: The linkedin of this CV.
        :type linkedin: str
        """

        self._linkedin = linkedin

    @property
    def skype(self) -> str:
        """Gets the skype of this CV.


        :return: The skype of this CV.
        :rtype: str
        """
        return self._skype

    @skype.setter
    def skype(self, skype: str):
        """Sets the skype of this CV.


        :param skype: The skype of this CV.
        :type skype: str
        """

        self._skype = skype

    @property
    def education(self) -> List[EducationItems]:
        """Gets the education of this CV.


        :return: The education of this CV.
        :rtype: List[EducationItems]
        """
        return self._education

    @education.setter
    def education(self, education: List[EducationItems]):
        """Sets the education of this CV.


        :param education: The education of this CV.
        :type education: List[EducationItems]
        """

        self._education = education

    @property
    def skills(self) -> List[SkillsItems]:
        """Gets the skills of this CV.


        :return: The skills of this CV.
        :rtype: List[SkillsItems]
        """
        return self._skills

    @skills.setter
    def skills(self, skills: List[SkillsItems]):
        """Sets the skills of this CV.


        :param skills: The skills of this CV.
        :type skills: List[SkillsItems]
        """

        self._skills = skills

    @property
    def experience(self) -> List[ExperienceItems]:
        """Gets the experience of this CV.


        :return: The experience of this CV.
        :rtype: List[ExperienceItems]
        """
        return self._experience

    @experience.setter
    def experience(self, experience: List[ExperienceItems]):
        """Sets the experience of this CV.


        :param experience: The experience of this CV.
        :type experience: List[ExperienceItems]
        """

        self._experience = experience
