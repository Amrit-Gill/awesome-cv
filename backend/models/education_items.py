# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.base_model_ import Model
from models.details import Details  # noqa: F401,E501
import util


class EducationItems(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, school: str=None, title: str=None, address: str=None, start_date: str=None, end_date: str='Present', details: List[Details]=None):  # noqa: E501
        """EducationItems - a model defined in Swagger

        :param school: The school of this EducationItems.  # noqa: E501
        :type school: str
        :param title: The title of this EducationItems.  # noqa: E501
        :type title: str
        :param address: The address of this EducationItems.  # noqa: E501
        :type address: str
        :param start_date: The start_date of this EducationItems.  # noqa: E501
        :type start_date: str
        :param end_date: The end_date of this EducationItems.  # noqa: E501
        :type end_date: str
        :param details: The details of this EducationItems.  # noqa: E501
        :type details: List[Details]
        """
        self.swagger_types = {
            'school': str,
            'title': str,
            'address': str,
            'start_date': str,
            'end_date': str,
            'details': List[Details]
        }

        self.attribute_map = {
            'school': 'school',
            'title': 'title',
            'address': 'address',
            'start_date': 'startDate',
            'end_date': 'endDate',
            'details': 'details'
        }

        self._school = school
        self._title = title
        self._address = address
        self._start_date = start_date
        self._end_date = end_date
        self._details = details

    @classmethod
    def from_dict(cls, dikt) -> 'EducationItems':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The educationItems of this EducationItems.  # noqa: E501
        :rtype: EducationItems
        """
        return util.deserialize_model(dikt, cls)

    @property
    def school(self) -> str:
        """Gets the school of this EducationItems.


        :return: The school of this EducationItems.
        :rtype: str
        """
        return self._school

    @school.setter
    def school(self, school: str):
        """Sets the school of this EducationItems.


        :param school: The school of this EducationItems.
        :type school: str
        """
        if school is None:
            raise ValueError("Invalid value for `school`, must not be `None`")  # noqa: E501

        self._school = school

    @property
    def title(self) -> str:
        """Gets the title of this EducationItems.


        :return: The title of this EducationItems.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this EducationItems.


        :param title: The title of this EducationItems.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def address(self) -> str:
        """Gets the address of this EducationItems.


        :return: The address of this EducationItems.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this EducationItems.


        :param address: The address of this EducationItems.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def start_date(self) -> str:
        """Gets the start_date of this EducationItems.


        :return: The start_date of this EducationItems.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: str):
        """Sets the start_date of this EducationItems.


        :param start_date: The start_date of this EducationItems.
        :type start_date: str
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self) -> str:
        """Gets the end_date of this EducationItems.


        :return: The end_date of this EducationItems.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: str):
        """Sets the end_date of this EducationItems.


        :param end_date: The end_date of this EducationItems.
        :type end_date: str
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def details(self) -> List[Details]:
        """Gets the details of this EducationItems.


        :return: The details of this EducationItems.
        :rtype: List[Details]
        """
        return self._details

    @details.setter
    def details(self, details: List[Details]):
        """Sets the details of this EducationItems.


        :param details: The details of this EducationItems.
        :type details: List[Details]
        """

        self._details = details
